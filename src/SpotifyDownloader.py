import csv
import subprocess
from threading import Thread


class SpotifyDownloader(object):

    def __init__(self, csv_path: str, download_dest: str,
                 thread_count: int, youtube_dl_path="", additional_keywords="", audio_format="mp3"):

        # Saves settings for the class
        self.settings = {
            "cvs_path": csv_path,
            "download_dest": download_dest,
            "thread_count": thread_count,
            "youtube_dl_path": youtube_dl_path,
            "additional_keywords": additional_keywords,
            "audio_format": audio_format
        }

        # Check a threadcount larger than 0
        if self.settings["thread_count"] < 1:
            raise Exception("You need to use at least one thread")

        # Check if youtube-dl is installed with environment variables
        if self.settings["youtube_dl_path"] == "":
            self.settings["youtube_dl_path"] = "youtube-dl"

        # Raise error if something was not given
        if self.settings["cvs_path"] == "" or \
                self.settings["download_dest"] == "" or \
                self.settings["audio_format"] == "":
            raise Exception("Invalid values were entered")

    def get_settings(self):
        return self.settings

    # Takes a list and returns equally big chunks of it.
    def chunks(self, lst, n):
        for i in range(0, len(lst), n):
            yield lst[i:i + n]

    # Starts the download process.
    def Start(self):
        print("Starting download...")
        self.distribute_download_tasks(self.get_download_commands())
        print("Download finished.")

    # Takes the csv file and extracts the name and Artist from every song, which is returned with a list of touples.
    def get_song_artist_and_name(self):
        with open(self.settings["cvs_path"], encoding='cp850', mode='r') as csv_file:
            csv_reader = csv.DictReader(csv_file)
            listSongInfo = []
            for row in csv_reader:
                listSongInfo.append((row["Track Name"], row["Artist Name(s)"]))
            return listSongInfo

    # Generates Youtube-DL commands from the csv file.
    def get_download_commands(self):
        command_list = []
        song_list = self.get_song_artist_and_name()
        for song in song_list:
            command_list.append(
                "{youtube_dl_path} -x --audio-format {audio_format} -o {download_dest}%(title)s.%(ext)s \"ytsearch1:"
                "{song0} {song1} {additional_keywords}\"".format(youtube_dl_path=self.settings["youtube_dl_path"],
                                                                 audio_format=self.settings["audio_format"],
                                                                 download_dest=self.settings["download_dest"],
                                                                 song0=song[0], song1=song[1],
                                                                 additional_keywords=self.settings[
                                                                     "additional_keywords"])
            )
        return command_list

    # Takes a commandlist, generated by getDownloadCommands() and distributes them over the given amount of threads.
    def distribute_download_tasks(self, commandList):
        command_chunks = self.chunks(commandList, int(round(len(commandList) / self.settings["thread_count"], 0)))
        thread_list = []

        for commands in command_chunks:
            thread_list.append(Thread(target=self.start_thread_with_chunk, args=(commands,)))

        for thread in thread_list:
            thread.start()

        for thread in thread_list:
            thread.join()

    # Calls a chunk of commands.
    def start_thread_with_chunk(self, chunk):
        for command in chunk:
            subprocess.call(command)


if __name__ == '__main__':
    print("Welcome to this script!")
    SD = SpotifyDownloader(
        input("Please enter the path to the downloaded csv file:"),
        input("Enter a path, where the music should be saved:"),
        int(input("Enter the amount of threads you want to use (number):")),
        input("Please enter the path to the 'youtube-dl.exe':"),
        input("Add additional keywords that should be added to the Youtube search:")
    )
    SD.Start()
